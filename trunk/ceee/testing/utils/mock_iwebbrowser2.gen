// Copyright (c) 2010 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Auto-generated by com_mock.py

MOCK_METHOD0_WITH_CALLTYPE(__stdcall, GoBack, HRESULT());
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, GoForward, HRESULT());
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, GoHome, HRESULT());
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, GoSearch, HRESULT());
MOCK_METHOD5_WITH_CALLTYPE(__stdcall, Navigate, HRESULT(
    BSTR URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, Refresh, HRESULT());
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, Refresh2, HRESULT(VARIANT *Level));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, Stop, HRESULT());
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Application, HRESULT(
    IDispatch **ppDisp));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Parent, HRESULT(
    IDispatch **ppDisp));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Container, HRESULT(
    IDispatch **ppDisp));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Document, HRESULT(
    IDispatch **ppDisp));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_TopLevelContainer, HRESULT(
    VARIANT_BOOL *pBool));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Type, HRESULT(BSTR *Type));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Left, HRESULT(long *pl));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Left, HRESULT(long Left));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Top, HRESULT(long *pl));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Top, HRESULT(long Top));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Width, HRESULT(long *pl));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Width, HRESULT(long Width));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Height, HRESULT(long *pl));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Height, HRESULT(long Height));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_LocationName, HRESULT(
    BSTR *LocationName));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_LocationURL, HRESULT(
    BSTR *LocationURL));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Busy, HRESULT(VARIANT_BOOL *pBool));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, Quit, HRESULT());
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, ClientToWindow, HRESULT(
    int *pcx, int *pcy));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, PutProperty, HRESULT(
    BSTR Property, VARIANT vtValue));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, GetProperty, HRESULT(
    BSTR Property, VARIANT *pvtValue));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Name, HRESULT(BSTR *Name));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_HWND, HRESULT(SHANDLE_PTR *pHWND));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_FullName, HRESULT(BSTR *FullName));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Path, HRESULT(BSTR *Path));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Visible, HRESULT(
    VARIANT_BOOL *pBool));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Visible, HRESULT(
    VARIANT_BOOL Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_StatusBar, HRESULT(
    VARIANT_BOOL *pBool));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_StatusBar, HRESULT(
    VARIANT_BOOL Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_StatusText, HRESULT(
    BSTR *StatusText));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_StatusText, HRESULT(
    BSTR StatusText));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_ToolBar, HRESULT(int *Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_ToolBar, HRESULT(int Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_MenuBar, HRESULT(
    VARIANT_BOOL *Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_MenuBar, HRESULT(
    VARIANT_BOOL Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_FullScreen, HRESULT(
    VARIANT_BOOL *pbFullScreen));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_FullScreen, HRESULT(
    VARIANT_BOOL bFullScreen));
MOCK_METHOD5_WITH_CALLTYPE(__stdcall, Navigate2, HRESULT(
    VARIANT *URL, VARIANT *Flags, VARIANT *TargetFrameName, VARIANT *PostData, VARIANT *Headers));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, QueryStatusWB, HRESULT(
    OLECMDID cmdID, OLECMDF *pcmdf));
MOCK_METHOD4_WITH_CALLTYPE(__stdcall, ExecWB, HRESULT(
    OLECMDID cmdID, OLECMDEXECOPT cmdexecopt, VARIANT *pvaIn, VARIANT *pvaOut));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, ShowBrowserBar, HRESULT(
    VARIANT *pvaClsid, VARIANT *pvarShow, VARIANT *pvarSize));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_ReadyState, HRESULT(
    READYSTATE *plReadyState));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Offline, HRESULT(
    VARIANT_BOOL *pbOffline));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Offline, HRESULT(
    VARIANT_BOOL bOffline));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Silent, HRESULT(
    VARIANT_BOOL *pbSilent));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Silent, HRESULT(
    VARIANT_BOOL bSilent));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_RegisterAsBrowser, HRESULT(
    VARIANT_BOOL *pbRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_RegisterAsBrowser, HRESULT(
    VARIANT_BOOL bRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_RegisterAsDropTarget, HRESULT(
    VARIANT_BOOL *pbRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_RegisterAsDropTarget, HRESULT(
    VARIANT_BOOL bRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_TheaterMode, HRESULT(
    VARIANT_BOOL *pbRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_TheaterMode, HRESULT(
    VARIANT_BOOL bRegister));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_AddressBar, HRESULT(
    VARIANT_BOOL *Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_AddressBar, HRESULT(
    VARIANT_BOOL Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Resizable, HRESULT(
    VARIANT_BOOL *Value));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_Resizable, HRESULT(
    VARIANT_BOOL Value));
