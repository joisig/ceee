// Copyright (c) 2010 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Auto-generated by com_mock.py

MOCK_METHOD2_WITH_CALLTYPE(__stdcall, item, HRESULT(
    VARIANT *pvarIndex, VARIANT *pvarResult));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_length, HRESULT(long *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_frames, HRESULT(
    IHTMLFramesCollection2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_defaultStatus, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_defaultStatus, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_status, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_status, HRESULT(BSTR *p));
MOCK_METHOD4_WITH_CALLTYPE(__stdcall, setTimeout, HRESULT(
    BSTR expression, long msec, VARIANT *language, long *timerID));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, clearTimeout, HRESULT(long timerID));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, alert, HRESULT(BSTR message = L""));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, confirm, HRESULT(
    BSTR message, VARIANT_BOOL *confirmed));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, prompt, HRESULT(
    BSTR message, BSTR defstr, VARIANT *textdata));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Image, HRESULT(
    IHTMLImageElementFactory **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_location, HRESULT(
    IHTMLLocation **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_history, HRESULT(IOmHistory **p));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, close, HRESULT());
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_opener, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_opener, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_navigator, HRESULT(
    IOmNavigator **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_name, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_name, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_parent, HRESULT(IHTMLWindow2 **p));
MOCK_METHOD5_WITH_CALLTYPE(__stdcall, open, HRESULT(
    BSTR url, BSTR name, BSTR features, VARIANT_BOOL replace, IHTMLWindow2 **pomWindowResult));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_self, HRESULT(IHTMLWindow2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_top, HRESULT(IHTMLWindow2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_window, HRESULT(IHTMLWindow2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, navigate, HRESULT(BSTR url));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onfocus, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onfocus, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onblur, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onblur, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onload, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onload, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onbeforeunload, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onbeforeunload, HRESULT(
    VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onunload, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onunload, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onhelp, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onhelp, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onerror, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onerror, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onresize, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onresize, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onscroll, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onscroll, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_document, HRESULT(
    IHTMLDocument2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_event, HRESULT(IHTMLEventObj **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get__newEnum, HRESULT(IUnknown **p));
MOCK_METHOD4_WITH_CALLTYPE(__stdcall, showModalDialog, HRESULT(
    BSTR dialog, VARIANT *varArgIn, VARIANT *varOptions, VARIANT *varArgOut));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, showHelp, HRESULT(
    BSTR helpURL, VARIANT helpArg, BSTR features));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_screen, HRESULT(IHTMLScreen **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Option, HRESULT(
    IHTMLOptionElementFactory **p));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, focus, HRESULT());
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_closed, HRESULT(VARIANT_BOOL *p));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, blur, HRESULT());
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, scroll, HRESULT(long x, long y));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_clientInformation, HRESULT(
    IOmNavigator **p));
MOCK_METHOD4_WITH_CALLTYPE(__stdcall, setInterval, HRESULT(
    BSTR expression, long msec, VARIANT *language, long *timerID));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, clearInterval, HRESULT(long timerID));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_offscreenBuffering, HRESULT(
    VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_offscreenBuffering, HRESULT(
    VARIANT *p));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, execScript, HRESULT(
    BSTR code, BSTR language, VARIANT *pvarRet));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, toString, HRESULT(BSTR *String));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, scrollBy, HRESULT(long x, long y));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, scrollTo, HRESULT(long x, long y));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, moveTo, HRESULT(long x, long y));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, moveBy, HRESULT(long x, long y));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, resizeTo, HRESULT(long x, long y));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, resizeBy, HRESULT(long x, long y));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_external, HRESULT(IDispatch **p));
