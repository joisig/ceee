// Copyright (c) 2010 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Auto-generated by com_mock.py

MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_Script, HRESULT(IDispatch **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_all, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_body, HRESULT(IHTMLElement **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_activeElement, HRESULT(
    IHTMLElement **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_images, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_applets, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_links, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_forms, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_anchors, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_title, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_title, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_scripts, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_designMode, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_designMode, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_selection, HRESULT(
    IHTMLSelectionObject **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_readyState, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_frames, HRESULT(
    IHTMLFramesCollection2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_embeds, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_plugins, HRESULT(
    IHTMLElementCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_alinkColor, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_alinkColor, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_bgColor, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_bgColor, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_fgColor, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_fgColor, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_linkColor, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_linkColor, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_vlinkColor, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_vlinkColor, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_referrer, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_location, HRESULT(
    IHTMLLocation **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_lastModified, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_URL, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_URL, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_domain, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_domain, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_cookie, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_cookie, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_expando, HRESULT(VARIANT_BOOL v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_expando, HRESULT(VARIANT_BOOL *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_charset, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_charset, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_defaultCharset, HRESULT(BSTR v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_defaultCharset, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_mimeType, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_fileSize, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_fileCreatedDate, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_fileModifiedDate, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_fileUpdatedDate, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_security, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_protocol, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_nameProp, HRESULT(BSTR *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, write, HRESULT(SAFEARRAY * psarray));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, writeln, HRESULT(SAFEARRAY * psarray));
MOCK_METHOD5_WITH_CALLTYPE(__stdcall, open, HRESULT(
    BSTR url, VARIANT name, VARIANT features, VARIANT replace, IDispatch **pomWindowResult));
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, close, HRESULT());
MOCK_METHOD0_WITH_CALLTYPE(__stdcall, clear, HRESULT());
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandSupported, HRESULT(
    BSTR cmdID, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandEnabled, HRESULT(
    BSTR cmdID, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandState, HRESULT(
    BSTR cmdID, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandIndeterm, HRESULT(
    BSTR cmdID, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandText, HRESULT(
    BSTR cmdID, BSTR *pcmdText));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, queryCommandValue, HRESULT(
    BSTR cmdID, VARIANT *pcmdValue));
MOCK_METHOD4_WITH_CALLTYPE(__stdcall, execCommand, HRESULT(
    BSTR cmdID, VARIANT_BOOL showUI, VARIANT value, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, execCommandShowHelp, HRESULT(
    BSTR cmdID, VARIANT_BOOL *pfRet));
MOCK_METHOD2_WITH_CALLTYPE(__stdcall, createElement, HRESULT(
    BSTR eTag, IHTMLElement **newElem));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onhelp, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onhelp, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onclick, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onclick, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_ondblclick, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_ondblclick, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onkeyup, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onkeyup, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onkeydown, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onkeydown, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onkeypress, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onkeypress, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onmouseup, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onmouseup, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onmousedown, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onmousedown, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onmousemove, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onmousemove, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onmouseout, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onmouseout, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onmouseover, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onmouseover, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onreadystatechange, HRESULT(
    VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onreadystatechange, HRESULT(
    VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onafterupdate, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onafterupdate, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onrowexit, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onrowexit, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onrowenter, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onrowenter, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_ondragstart, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_ondragstart, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onselectstart, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onselectstart, HRESULT(VARIANT *p));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, elementFromPoint, HRESULT(
    long x, long y, IHTMLElement **elementHit));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_parentWindow, HRESULT(
    IHTMLWindow2 **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_styleSheets, HRESULT(
    IHTMLStyleSheetsCollection **p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onbeforeupdate, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onbeforeupdate, HRESULT(
    VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, put_onerrorupdate, HRESULT(VARIANT v));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, get_onerrorupdate, HRESULT(VARIANT *p));
MOCK_METHOD1_WITH_CALLTYPE(__stdcall, toString, HRESULT(BSTR *String));
MOCK_METHOD3_WITH_CALLTYPE(__stdcall, createStyleSheet, HRESULT(
    BSTR bstrHref, long lIndex, IHTMLStyleSheet **ppnewStyleSheet));
